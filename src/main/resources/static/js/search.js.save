cd ~/Documents/GitHub/"Search Engine"
sed -i '' "s|const API = 'http://localhost:8080/api';|const API = '/api';|" ./src/main/resources/static/js/search.js

const API = 'http://localhost:8080/api';

const searchInput = document.getElementById('searchInput');
const searchInputMini = document.getElementById('searchInputMini');
const suggestions = document.getElementById('suggestions');
const searchPage = document.getElementById('searchPage');
const resultsPage = document.getElementById('resultsPage');
const resultsGrid = document.getElementById('resultsGrid');
const resultsTitle = document.getElementById('resultsTitle');
const resultsSubtitle = document.getElementById('resultsSubtitle');
const docCount = document.getElementById('docCount');

let allDocuments = [];

window.onload = () => {
    loadAllDocuments();
};

searchInput.addEventListener('input', handleInput);
searchInput.addEventListener('keypress', (e) => {
    if (e.key === 'Enter' && searchInput.value.trim()) {
        performSearch(searchInput.value.trim());
    }
});

function handleInput(e) {
    const query = e.target.value.trim();
    
    if (query.length > 0) {
        showSuggestions(query);
    } else {
        suggestions.classList.remove('show');
    }
}

function showSuggestions(query) {
    const filtered = allDocuments.filter(doc =>
        doc.name.toLowerCase().includes(query.toLowerCase())
    ).slice(0, 4);
    
    if (filtered.length > 0) {
        suggestions.innerHTML = filtered.map(doc => `
            <div class="suggestion-item" onclick="performSearch('${doc.name}')">
                <span style="font-size: 1.5rem;">üìÑ</span>
                <span>${doc.name}</span>
            </div>
        `).join('');
        suggestions.classList.add('show');
    } else {
        suggestions.classList.remove('show');
    }
}

async function loadAllDocuments() {
    try {
        const response = await fetch(`${API}/documents`);
        const data = await response.json();
        allDocuments = data.documents;
        docCount.textContent = `${data.total} documents indexed`;
    } catch (error) {
        console.error('Error:', error);
        docCount.textContent = 'Service offline';
    }
}

async function performSearch(query) {
    try {
        searchInput.value = query;
        suggestions.classList.remove('show');
        
        const startTime = performance.now();
        const response = await fetch(`${API}/search?q=${encodeURIComponent(query)}`);
        const data = await response.json();
        const endTime = performance.now();
        const timeTaken = ((endTime - startTime) / 1000).toFixed(2);
        
        showResults(data.results, data.query, data.count, timeTaken);
    } catch (error) {
        console.error('Error:', error);
    }
}

function showResults(results, query, count, time) {
    searchPage.style.display = 'none';
    resultsPage.style.display = 'block';
    
    resultsTitle.textContent = `Results for "${query}"`;
    resultsSubtitle.textContent = `Found ${count} results in ${time} seconds`;
    searchInputMini.value = query;
    
    if (results.length === 0) {
        resultsGrid.innerHTML = `
            <div class="no-results">
                <div class="no-results-icon">üîç</div>
                <h3>No results found</h3>
                <p>Try different keywords or check the spelling</p>
            </div>
        `;
        return;
    }
    
    resultsGrid.innerHTML = results.map(doc => `
        <div class="result-card">
            <div class="result-header">
                <div>
                    <div class="result-title">üìÑ ${doc.name}</div>
                </div>
                <span class="result-score">‚≠ê ${doc.score.toFixed(0)}</span>
            </div>
            <div class="result-content">${doc.preview}</div>
            <div class="result-actions">
                <a href="${doc.pdfUrl}" target="_blank" class="pdf-btn">
                    üì• Open PDF
                </a>
            </div>
        </div>
    `).join('');
}

function backToSearch() {
    resultsPage.style.display = 'none';
    searchPage.style.display = 'flex';
    searchInput.value = '';
    suggestions.classList.remove('show');
}

function searchFromMini() {
    const query = searchInputMini.value.trim();
    if (query) {
        performSearch(query);
    }
}
